[Default]
folder: Example
due: 01 Jan 2016 09:00:00--0500
source: sourcefile.c,sourcefile1.c,sourcefile.txt
build: gcc -o source sourcefile.c,gcc -o source2 sourcefile1.c
support files: Makefile, headerfile.h


; Folder is the name of the assignment directory that submission was expected in
; Due is the date and time that the assignment was due
; Source is a list of the files that are required to be in the directory/expected

; Support files and build are both optional pieces of information
; Support files are files that as a grader you are loading into the
    ; source location in order to help compiling or runtime requirements
    ; an example would be a c header file.  Currently support files
    ; replace any files by that name in the assignment directory.
; Build is a comma list of all of the commands that are required to build
    ; the assignment, this command can be make (just make sure to provide a
    ; Makefile as a part of the support files or add it to the source list)

; The following sections are used to test the compiled code, if you require multiple
; of any of the below just copy the section format:
    ; For 'diff' testing:
        ; Name provides an identifier as the tests run
        ; exe is the executable that needs to be run in order to create the
            ; student's output
        ; Input is the input that the executable should be run with in order
            ; to generate the student's output (this is a required field, but
            ; can be an empty file, however if making this empty try looking
            ; at a different kind of testing)
        ; Output is the expected output you are providing to the diff
[Diff 1]
name: Chart 1 - Integer output
exe: chart1
input: input.txt
output: chart1.txt

[Diff 2]
name: Chart 2 - Floating point output
exe: chart2
input: input.txt
output: chart2.txt

    ; For 'Unit' testing:
        ; Name provides an identifier as the tests run
        ; exe is the executable that needs to be run in order to create the
            ; student's output
    ; !!!Implementation for this has not been completed!!
[Unit 1]
name: Unit tests
exe: test
input: example1.txt
output: example1.txt

    ; For 'Bash' testing:
            ; Example usage: valgrind ./test
                ; Run the program with valgrind to confirm memory management
        ; Name provides an idenitfier as the tests are run
        ; Command is the bash commmand (it will be run exactly as typed)
[Bash 1]
name: Extra Bash Command
command: echo Hello World

[Bash 2]
name: Extra Bash Command 2
command: echo Hello Again World